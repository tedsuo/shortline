#!/usr/bin/env node
var argv = require('optimist').argv;
if(argv["m"]){
  process.env.NODE_ENV = argv["m"];
}
var exec = require("child_process").exec;
var spawn = require("child_process").spawn;
var _ = require('underscore');
var fs = require('fs');
var colors = require('colors');
var async = require('async');
var util = require('util');
var path = require('path');
var log = require(path.normalize(__dirname+'/../lib/log'));
var default_mobettah_shortline_conffile = '/etc/mobettah_shortline.js';
var default_mobettah_shortline_local_conffile = 'mobettah_config.js';

var cwd = process.cwd();
var SERVER_PATH = path.normalize(__dirname+'/../lib/server.js');
var SERVER_PATH = parent_dir() + "/lib/server.js";
var command = process.argv[2];
var adapter;
var config;

function print_help(){
  console.log( fs.readFileSync(__dirname+'/../help.txt').toString());
}

function parent_dir(){
  var dir_split = __dirname.split('/');
  return dir_split.slice(0,dir_split.length - 1).join('/');
}

function execute_command(commands){
  if(_.include(Object.keys(commands), command)){
    config = require('../lib/config');
    if(command !== "stop"){
      adapter = require('../lib/db/adapter');
    }
    commands[command]();
  } else {
    print_help();
    process.exit();
  }
}

function mobettah_boot(mobettah_cmd, mobettah_config_file){
  var preexec = "";

  var child_args = [];
  if(mobettah_config_file != null){
    child_args.push('-c');
    child_args.push(mobettah_config_file);
  }
  child_args.push('node');
  child_args.push(SERVER_PATH);
  
  var child = spawn(mobettah_cmd, child_args);
  var watch;
  if(process.env.NODE_ENV == "test"){
    var info_file = path.join(__dirname,'..','test','log','info.log');
    watch = spawn('tail', ['-f',info_file,'-n','0']);
  } else {
    watch = child;
  }
  watch.stdout.on('data', function(data){
    log.info(data.toString());
  });
  watch.stderr.on('data', function(data){
    log.info(data.toString());
  });
  watch.stdout.on('data', function(data){
    if(data.toString().indexOf("listening") != -1){
      console.log("Shortline process started");
      process.exit();
    }
  });
}


// short start -p 3030 -c short_conf
commands = {

  install: function(){
    var prompter = require('prompter');
    var install_script = fs.readFileSync(__dirname+"/../misc/shortline.json.example");
    var CONFIG_PATH = process.cwd()+'/shortline.json';

    console.log('CREATING SHORTLINE CONFIGURATION');
    var prompt = prompter(install_script,function(err,config_data){
        fs.writeFileSync(CONFIG_PATH,config_data);
        console.log(CONFIG_PATH+' created');
        console.log('TO COMPLETE INSTALL: open shortline.json and edit db settings, then move file to etc/shortline.json');
        process.exit();
    });
    process.stdin.pipe(prompt);
    prompt.pipe(process.stdout);
  },

  start:function(port){
    exec('ps aux | grep '+ SERVER_PATH +' | grep -v grep | wc -l', function(error, stdout){
      if(error){
        console.log("ERROR: Shortline could not start: " + error);
      }
      if(stdout.trim() == '0'){
        exec('which mobettah | wc -l', function(error, stdout){
          if(stdout.trim() == '0'){
            var mobettah_cmd = parent_dir() + "/node_modules/mobettah/bin/mobettah";
          } else {
            var mobettah_cmd = "mobettah";
          }

          if(argv.config){
            mobettah_boot(mobettah_cmd, argv.config+'/'+default_mobettah_shortline_local_conffile);
          } else {
            fs.stat(default_mobettah_shortline_conffile, function(err){
              if(err){
                fs.stat(process.cwd()+'/'+default_mobettah_shortline_local_conffile, function(err){
                  if(err){
                    mobettah_boot(mobettah_cmd, null);
                  } else {
                    mobettah_boot(mobettah_cmd, process.cwd()+'/'+default_mobettah_shortline_local_conffile);
                  }
                });
              } else {
                mobettah_boot(mobettah_cmd, default_mobettah_shortline_conffile);
              }
            });
          }
        });
      } else {
        console.log("ERROR: An instance of Shortline is already running.");
        process.exit();
      }
    });
  },
  
  stop:function(){
    fs.readFile("/tmp/mobettah.pid", function(err, data){
      if(err){
        console.log('ERROR: Could not stop shortline: ' + err);
        process.exit();
      }
      exec("kill "+data.toString(), function(error, response){
        if(!error) {
          console.log("Shortline process stopped");
          process.exit();
        } else {
          console.log("ERROR: Shortline could not quit: " + error);
          process.exit();
        }
      });
    });
  },

  test:function(){
    var test_runner = spawn('npm',['test'], {customFds: [0,1,2], cwd: parent_dir()});
    test_runner.on('exit',function(){
      process.exit();
    });
  },

  ls:function(){
    if(argv.r){
      console.log("List Receiver with name \""+argv.r+"\"");
      adapter.find_receiver_by_name(argv.r, list_wrapper(function(receiver){
        print_receiver(receiver);
      }));
    } else {
      console.log("List of Receivers");
      adapter.find_all_receivers(list_wrapper(function(receivers){
        _.each(receivers, function(receiver){
          print_receiver(receiver);
        });
      }));
    }
    console.log("");
    function print_receiver(doc){
      console.log(("["+doc.name.blue+"]").bold);
      console.log("  Host:          "+doc.host);
      if(doc.ip) console.log("  IP:            "+doc.ip);
      console.log("  Port:          "+doc.port);
      console.log("  Concurrency:   "+doc.concurrency);
      console.log("");
    };
    function list_wrapper(cb){
      return function(err, doc){
        if(err){
          console.log(err);
          process.exit();
        }
        cb(doc);
        process.exit();
      }
    }
  },
  
  add:function(){
    switch(process.argv[3]){
      case "receiver":
        var name = process.argv[4];
        var host = process.argv[5];
        var concurrency = Number(argv.c) || config.default_receiver_concurrency;
        var port = Number(argv.p) || config.default_receiver_port;

        if(!name || !host || !_.isNumber(concurrency) || !_.isNumber(port)){
          print_help();
          process.exit();
        }
        
        adapter.find_receiver_by_name(name, function(err, opts){
          if(err == null){
            console.log("Error: A receiver by this name already exists.");
            process.exit();
          }
          var options = {
            name: name,
            host: host,
            concurrency: concurrency,
            port: port
          };

          if(argv.i) options.ip = argv.i;
          
          adapter.add_receiver(options, function(err){
            if(err){
              console.log('There has been an error saving this receiver.');
              process.exit();
            } else {
              console.log('You have saved this receiver.');
              console.log(options);
              process.exit();
            }
          });
        });
        break;
      default:
        print_help();
        process.exit();
    }
  },

  update:function(){
    switch(process.argv[3]){
      case "receiver":
        var name = process.argv[4];
        if(!name || !(argv.n || argv.h || _.isNumber(argv.c) || _.isNumber(argv.p) || argv.i)){
          print_help();
          process.exit();
        }

        var options = {};
        if(argv.n) options.name = argv.n;
        if(argv.h) options.host = argv.h;
        if(argv.c) options.concurrency = Number(argv.c);
        if(argv.p) options.port = Number(argv.p);
        if(argv.i) options.ip = argv.i;

        adapter.update_receiver(name, options, function(err){
          if(err){
            console.log('There has been an error updating the receiver.');
            process.exit();
          }
          console.log('You have updated this receiver.');
          process.exit();
        });
        break;
      default:
        print_help();
        process.exit();
    }
  },

  remove:function(){
    switch(process.argv[3]){
      case "receiver":
        var name = process.argv[4];
        if(!name){
          print_help();
          process.exit();
        }
        adapter.remove_receiver(name, function(err){
          if(err){
            console.log('There has been an error removing the receiver.');
            process.exit();
          }
          console.log('You have removed this receiver.');
          process.exit();
        });
        break;
      case "all":
        log.info('starting all');
        adapter.remove_all(function(err){
          if(err){
            console.log('There has been an error removing all records.');
            process.exit();
          }
          console.log('All records dropped from database.');
          process.exit();
        });
        break;
      default:
        print_help();
        process.exit();
    }
  },

  status:function(){
    var receiver_name = null;
    if(argv.r){
      receiver_name = argv.r;
      console.log("List of Current Jobs with Receiver: \""+argv.r+"\"");
    } else {
      console.log("List of Current Jobs");
    }
    adapter.find_jobs_by_receiver_name(receiver_name, {statuses: ['overflow', 'queued']}, function(err, jobs){
      if(err){
        console.log('There has been an error receiving the list of jobs.');
        process.exit();
      }
      var x = 0;
      _.each(jobs, function(job){
        x++;
        console.log();
        console.log("Job #" + x + ":");
        console.log("   Receiver:  "+job.receiver_name);
        console.log("   Path:      "+job.path);
        console.log("   Post Data: "+job.payload);
        console.log("   Status:    "+job.status);
      });
      process.exit();
    });
  },

  completion: function(){
    console.log( fs.readFileSync(__dirname+'/../lib/util/completion.sh').toString());
  }
}

execute_command(commands);
