#!/usr/bin/env node
var exec = require("child_process").exec;
var models = require('../models.js');
var argv = require('optimist').argv;
var config = require('../config');
var _ = require('underscore');

function print_help(){
  console.log('LIST OF COMMANDS');
  console.log('start <port>');
  console.log('stop');
  console.log('add <name> <host> [-c <concurrency>] [-p <port>]');
  console.log('addpath <receiver_name> <name> <url> [-t <timeout>]');
  console.log('ls');
  console.log('update');
  console.log('remove');
  console.log('rewind');
  console.log('help');
}

function execute_command(commands){
  var command = process.argv[2];
  if(Object.keys(commands).indexOf(command) !== -1){
    commands[command]();
  } else {
    commands.help();
    process.exit();
  }
}
// jb start -p 3030 -c jb_conf
commands = {
  start:function(port){
    var port = process.argv[3] || 80;
    exec("forever start --pidfile /var/run/job_board.pid -l /var/log/job_board.log " + __dirname + "/../job_board.js " + port, function(error){
      if(!error) {
        console.log("JobBoard Started running on port " + port +".");
				process.exit();
      } else {
        console.log("ERROR: Job Board could not start: " + error);
				process.exit();
      }
    });

    
  },
  
  stop:function(){
    exec("forever stop " + __dirname + "/../job_board.js", function(error){
      if(!error) {
        console.log("JobBoard got a pink slip.");
				process.exit();
      } else {
        console.log("ERROR: Job Board could not quit: " + error);
				process.exit();
      }
    });
  },

  restart:function(port){
    exec("forever restart " + __dirname + "/../job_board.js", function(error){
      if(!error) {
        console.log("JobBoard Rebooted Succesfully.");
				process.exit();
      } else {
        console.log("ERROR: Job Board restart fail: " + error);
				process.exit();
      }
    });
  },
  
  ls:function(){
    console.log('KEY : QUEUE');
    console.log('we-r-1.org 8');
    console.log('events.ran.org 4');
    console.log('app.learn.radicaldesigns.org 0');
  },
  
  add:function(){
    var name = process.argv[3];
    var host = process.argv[4];
    var concurrency = Number(argv.c) || config.default_receiver_concurrency;
    var port = Number(argv.p) || config.default_receiver_port;

    if(!name || !host || !_.isNumber(concurrency) || !_.isNumber(port)){
      print_help();
      process.exit();
      return;
    }

    var options = {
      name: name,
      host: host,
      concurrency: concurrency,
      port: port
    };

    var receiver = new models.Receiver(options);
    receiver.save(function(err){
      if(err){
        console.log('There has been an error saving this receiver.');
				process.exit();
      } else {
        console.log('You have saved this receiver.');
        console.log(options);
				process.exit();
      }
    });
  },

  addpath: function(){
    var o = {
      receiver_name: process.argv[3],
      name: process.argv[4],
      url: process.argv[5],
      timeout: Number(argv.t) || config.default_receiver_timeout
    };

    if(!o.receiver_name || !o.name || !o.url || !_.isNumber(o.timeout)){
      print_help();
      process.exit();
      return;
    }

    models.Receiver.find_by_name(o.receiver_name, function(err, receiver){
      if(err){
        console.log('There has been an error finding the record to add paths to');
				process.exit();
      }
      receiver.paths.push({name: o.name, url: o.url, timeout: o.timeout});
      receiver.save(function(err){
        if(err){
          console.log('There has been an error saving.');
					process.exit();
        }
        console.log('You have saved this path.');
        console.log(o);
        process.exit();
      });
    });
  },
  
  remove:function(){
    var slug = process.argv[3];
  },
  
  rewind:function(){},
  
  help:function(){
    print_help();
  }
}

execute_command(commands);
