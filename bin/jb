#!/usr/bin/env node
var exec = require("child_process").exec;
var models = require('../models.js');
var argv = require('optimist').argv;
var config = require('../config');
var _ = require('underscore');

function print_help(){
  console.log('LIST OF COMMANDS');
  console.log('----------------');
  console.log('start <port>');
  console.log('stop');
  console.log('add receiver <name> <host> [-c <concurrency>] [-p <port>]');
  console.log('add path <receiver_name> <name> <url> [-t <timeout>]');
  console.log('update receiver <name> [-n <new_name>] [-h <host>] [-c <concurrency>] [-p <port>]');
  console.log('update path <receiver_name> <name> [-n <new_name>] [-u <url>] [-t <timeout>]');
  console.log('ls receivers');
  console.log('remove');
  console.log('rewind');
  console.log('help');
}

function execute_command(commands){
  var command = process.argv[2];
  if(Object.keys(commands).indexOf(command) !== -1){
    commands[command]();
  } else {
    commands.help();
    process.exit();
  }
}
// jb start -p 3030 -c jb_conf
commands = {
  start:function(port){
    var port = process.argv[3] || 80;
    exec("forever start --pidfile /var/run/job_board.pid -l /var/log/job_board.log " + __dirname + "/../job_board.js " + port, function(error){
      if(!error) {
        console.log("JobBoard Started running on port " + port +".");
				process.exit();
      } else {
        console.log("ERROR: Job Board could not start: " + error);
				process.exit();
      }
    });

    
  },
  
  stop:function(){
    exec("forever stop " + __dirname + "/../job_board.js", function(error){
      if(!error) {
        console.log("JobBoard got a pink slip.");
				process.exit();
      } else {
        console.log("ERROR: Job Board could not quit: " + error);
				process.exit();
      }
    });
  },

  restart:function(port){
    exec("forever restart " + __dirname + "/../job_board.js", function(error){
      if(!error) {
        console.log("JobBoard Rebooted Succesfully.");
				process.exit();
      } else {
        console.log("ERROR: Job Board restart fail: " + error);
				process.exit();
      }
    });
  },
  
  ls:function(){
    switch(process.argv[3]){
      case "receivers":
        
      default:
        print_help();
        process.exit();
    }
  },
  
  add:function(){
    switch(process.argv[3]){
      case "receiver":
        var name = process.argv[4];
        var host = process.argv[5];
        var concurrency = Number(argv.c) || config.default_receiver_concurrency;
        var port = Number(argv.p) || config.default_receiver_port;

        if(!name || !host || !_.isNumber(concurrency) || !_.isNumber(port)){
          print_help();
          process.exit();
        }

        var options = {
          name: name,
          host: host,
          concurrency: concurrency,
          port: port
        };

        var receiver = new models.Receiver(options);
        receiver.save(function(err){
          if(err){
            console.log('There has been an error saving this receiver.');
            process.exit();
          } else {
            console.log('You have saved this receiver.');
            console.log(options);
            process.exit();
          }
        });
        break;
      case "path":
        var o = {
          receiver_name: process.argv[4],
          name: process.argv[5],
          url: process.argv[6],
          timeout: Number(argv.t) || config.default_receiver_timeout
        };

        if(!o.receiver_name || !o.name || !o.url || !_.isNumber(o.timeout)){
          print_help();
          process.exit();
          return;
        }

        models.Receiver.find_by_name(o.receiver_name, function(err, receiver){
          if(err){
            console.log('There has been an error finding the record to add paths to');
            process.exit();
          }
          receiver.paths.push({name: o.name, url: o.url, timeout: o.timeout});
          receiver.save(function(err){
            if(err){
              console.log('There has been an error saving.');
              process.exit();
            }
            console.log('You have saved this path.');
            console.log(o);
            process.exit();
          });
        });
        break;
      default:
        print_help();
        process.exit();
    }
  },

  update:function(){
    switch(process.argv[3]){
      case "receiver":
        var name = process.argv[4];
        if(!name || !(argv.n || argv.h || _.isNumber(argv.c) || _.isNumber(argv.p))){
          print_help();
          process.exit();
        }
        models.Receiver.find_by_name(name, function(err, receiver){
          if(err){
            console.log('There has been an error finding the receiver to update.');
            process.exit();
          }
          if(argv.n) receiver.name = argv.n;
          if(argv.h) receiver.host = argv.h;
          if(argv.c) receiver.concurrency = Number(argv.c);
          if(argv.p) receiver.port = Number(argv.p);
          receiver.save(function(err){
            if(err){
              console.log('There has been an error updating the receiver.');
              process.exit();
            }
            console.log('You have updated this receiver.');
            process.exit();
          });
        });
        break;
      case "path":
        var receiver_name = process.argv[4];
        var name = process.argv[5];
        if(!name || !receiver_name || !(argv.n || argv.u || _.isNumber(argv.t))){
          print_help();
          process.exit();
        }
        models.Receiver.find_by_name(receiver_name, function(err, receiver){
          if(err){
            console.log('There has been an error finding the receiver to update.');
            process.exit();
          }
          var pathIndex = _.indexOf(receiver.paths, _.detect(receiver.paths, function(path){
            return path.name == name;
          }));
          if(pathIndex == -1){
            console.log('There has been an error finding the path to update.');
            process.exit();
          }
          if(argv.n) receiver.paths[pathIndex].name = argv.n;
          if(argv.u) receiver.paths[pathIndex].url = argv.u;
          if(argv.t) receiver.paths[pathIndex].timeout = Number(argv.t);
          receiver.paths[pathIndex].save(function(err){
            if(err){
              console.log('There has been an error updating the path.');
              process.exit();
            }
            console.log('You have updated this path.');
            process.exit();
          });
        });
        break;
      default:
        print_help();
        process.exit();
    }
  },

  remove:function(){
    var slug = process.argv[3];
  },
  
  rewind:function(){},
  
  help:function(){
    print_help();
  }
}

execute_command(commands);
